{"mappings":"oMAkBA,SAASA,iBAAiEC,GAKxE,MAAMC,EAAgBD,EAAO,sBACtBE,EAAyBC,GAAyBC,EAAmBH,IAOrEI,EAAwBC,GAAwBJ,EACrDD,EACA,CAAEM,cAAe,CAAEC,QAAS,MAAQC,QAAS,IAAIC,MAG7CC,EAAgDC,IACpD,MAAMC,MAAEA,EAAFC,SAASA,GAAaF,EACtBG,EAAMC,EAAMC,OAA0B,MACtCR,EAAUO,EAAMC,OAAgC,IAAIP,KAAOF,qBACjE,OACEU,EAAAC,cAACd,EAAD,CAAwBQ,MAAOA,EAAOJ,QAASA,EAASF,cAAeQ,GACpED,IAWDM,EAAuBpB,EAAO,iBAE9BqB,eAAiBL,EAAMM,YAC3B,CAACV,EAAOW,KACN,MAAMV,MAAEA,EAAFC,SAASA,GAAaF,EACtBY,EAAUlB,EAAqBc,EAAsBP,GACrDY,EAAeC,EAAgBH,EAAcC,EAAQjB,4BAC3D,OAAOW,EAAAC,cAACQ,EAAD,CAAMZ,IAAKU,GAAeX,MAU/Bc,EAAiB5B,EAAO,qBACxB6B,EAAiB,6BAOjBC,eAAqBd,EAAMM,YAC/B,CAACV,EAAOW,KACN,MAAMV,MAAEA,EAAFC,SAASA,KAAaiB,GAAanB,EACnCG,EAAMC,EAAMC,OAAoB,MAChCQ,EAAeC,EAAgBH,EAAcR,GAC7CS,EAAUlB,EAAqBsB,EAAgBf,GAOrD,OALAG,EAAMgB,WAAU,KACdR,EAAQf,QAAQwB,IAAIlB,EAAK,CAAEA,IAAAA,KAASgB,IAC7B,KAAWP,EAAQf,QAAQyB,OAAOnB,oBAIzCG,EAAAC,cAACQ,EAAD,CAAYE,CAACA,GAAiB,GAAMd,IAAKU,GACtCX,MA6BT,MAAO,CACL,CAAEqB,SAAUxB,EAAoBgB,KAAMN,EAAgBe,SAAUN,GAlBlE,SAAuBjB,GACrB,MAAMW,EAAUlB,EAAqBN,EAAO,qBAAsBa,GAalE,OAXiBG,EAAMqB,aAAY,KACjC,MAAMC,EAAiBd,EAAQjB,cAAcC,QAC7C,IAAK8B,EAAgB,MAAO,GAC5B,MAAMC,EAAeC,MAAMC,KAAKH,EAAeI,iBAAkB,IAAGb,OAKpE,OAJcW,MAAMC,KAAKjB,EAAQf,QAAQkC,UACdC,MACzB,CAACC,EAAGC,IAAMP,EAAaQ,QAAQF,EAAE9B,IAAIP,SAAY+B,EAAaQ,QAAQD,EAAE/B,IAAIP,aAG7E,CAACgB,EAAQjB,cAAeiB,EAAQf,WAQnCN","sources":["./packages/react/collection/src/Collection.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\ntype SlotProps = Radix.ComponentPropsWithoutRef<typeof Slot>;\ntype CollectionElement = HTMLElement;\ninterface CollectionProps extends SlotProps {\n  scope: any;\n}\n\n// We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>â€¦</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction createCollection<ItemElement extends HTMLElement, ItemData = {}>(name: string) {\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionProvider\n   * ---------------------------------------------------------------------------------------------*/\n\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n\n  type ContextValue = {\n    collectionRef: React.RefObject<CollectionElement>;\n    itemMap: Map<React.RefObject<ItemElement>, { ref: React.RefObject<ItemElement> } & ItemData>;\n  };\n\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext<ContextValue>(\n    PROVIDER_NAME,\n    { collectionRef: { current: null }, itemMap: new Map() }\n  );\n\n  const CollectionProvider: React.FC<{ scope: any }> = (props) => {\n    const { scope, children } = props;\n    const ref = React.useRef<CollectionElement>(null);\n    const itemMap = React.useRef<ContextValue['itemMap']>(new Map()).current;\n    return (\n      <CollectionProviderImpl scope={scope} itemMap={itemMap} collectionRef={ref}>\n        {children}\n      </CollectionProviderImpl>\n    );\n  };\n\n  CollectionProvider.displayName = PROVIDER_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionSlot\n   * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n\n  const CollectionSlot = React.forwardRef<CollectionElement, CollectionProps>(\n    (props, forwardedRef) => {\n      const { scope, children } = props;\n      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n      const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n      return <Slot ref={composedRefs}>{children}</Slot>;\n    }\n  );\n\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n\n  type CollectionItemSlotProps = ItemData & {\n    children: React.ReactNode;\n    scope: any;\n  };\n\n  const CollectionItemSlot = React.forwardRef<ItemElement, CollectionItemSlotProps>(\n    (props, forwardedRef) => {\n      const { scope, children, ...itemData } = props;\n      const ref = React.useRef<ItemElement>(null);\n      const composedRefs = useComposedRefs(forwardedRef, ref);\n      const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n\n      React.useEffect(() => {\n        context.itemMap.set(ref, { ref, ...(itemData as unknown as ItemData) });\n        return () => void context.itemMap.delete(ref);\n      });\n\n      return (\n        <Slot {...{ [ITEM_DATA_ATTR]: '' }} ref={composedRefs}>\n          {children}\n        </Slot>\n      );\n    }\n  );\n\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope: any) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort(\n        (a, b) => orderedNodes.indexOf(a.ref.current!) - orderedNodes.indexOf(b.ref.current!)\n      );\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n\n    return getItems;\n  }\n\n  return [\n    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },\n    useCollection,\n    createCollectionScope,\n  ] as const;\n}\n\nexport { createCollection };\nexport type { CollectionProps };\n"],"names":["createCollection","name","PROVIDER_NAME","createCollectionContext","createCollectionScope","createContextScope","CollectionProviderImpl","useCollectionContext","collectionRef","current","itemMap","Map","CollectionProvider","props","scope","children","ref","React","useRef","_react","createElement","COLLECTION_SLOT_NAME","CollectionSlot","forwardRef","forwardedRef","context","composedRefs","useComposedRefs","Slot","ITEM_SLOT_NAME","ITEM_DATA_ATTR","CollectionItemSlot","itemData","useEffect","set","delete","Provider","ItemSlot","useCallback","collectionNode","orderedNodes","Array","from","querySelectorAll","values","sort","a","b","indexOf"],"version":3,"file":"index.module.js.map"}